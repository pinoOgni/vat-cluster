- name: Template the VagrantFile.j2 configuration file to ../Vagrantfile
  ansible.builtin.template:
    src: VagrantFile.j2
    dest: ../Vagrantfile
    mode: '0644'
  delegate_to: localhost

- name: Check if the ~/.ssh directory exists, if not create it
  ansible.builtin.file:
    path: "{{ ssh_key_path }}"
    state: directory
    mode: '0755'

- name: Check if SSH key exists
  ansible.builtin.stat:
    path: "{{ ssh_key_path }}/{{ ssh_key_name }}"
  register: ssh_key_stat

- name: Generate SSH key if it does not exist
  community.crypto.openssh_keypair:
    path: "{{ ssh_key_path }}/{{ ssh_key_name }}"
  register: ssh_key
  when: not ssh_key_stat.stat.exists

- name: Run "vagrant up" with the Vagrantfile as input.
  ansible.builtin.command: vagrant up

- name: Get IP addresses for the manager node
  ansible.builtin.shell: |
    set -o pipefail
    VBoxManage guestproperty get {{ manager_prefix }}{{ item }} "/VirtualBox/GuestInfo/Net/1/V4/IP" | sed -e 's/Value: //g'
  register: manager_ip
  with_sequence: start=1 end="{{ managers }}"
  args:
    executable: /bin/bash

- name: Save manager nodes IP in managers_ips
  ansible.builtin.set_fact:
    managers_ips: "{{ managers_ips + [item.stdout_lines[0]] }}"
  loop: "{{ manager_ip.results }}"

- name: Add ssh configuration for the manager node.
  community.general.ssh_config:
    remote_user: "{{ user }}"
    host: "{{ manager_prefix }}{{ my_idx | int + 1 }}"
    hostname: "{{ item }}"
    identity_file: "{{ prv_key_path }}"
    ssh_config_file: "{{ ansible_user_dir }}/.ssh/config"
    forward_agent: true
    strict_host_key_checking: "no"
    user_known_hosts_file: /dev/null
    state: present
  loop: "{{ managers_ips }}"
  loop_control:
    index_var: my_idx

- name: Get IP addresses for the worker nodes
  ansible.builtin.shell: |
    set -o pipefail
    VBoxManage guestproperty get {{ worker_prefix }}{{ item.0 }} "/VirtualBox/GuestInfo/Net/1/V4/IP" | sed -e 's/Value: //g'
  register: worker_ips
  with_sequence: start=1 end="{{ workers }}"
  args:
    executable: /bin/bash

- name: Save worker nodes IPs in workers_ips
  ansible.builtin.set_fact:
    workers_ips: "{{ workers_ips + [item.stdout_lines[0]] }}"
  loop: "{{ worker_ips.results }}"

- name: Add ssh configuration for the worker nodes.
  community.general.ssh_config:
    remote_user: "{{ user }}"
    host: "{{ worker_prefix }}{{ my_idx | int + 1 }}"
    hostname: "{{ item }}"
    identity_file: "{{ prv_key_path }}"
    ssh_config_file: "{{ ansible_user_dir }}/.ssh/config"
    forward_agent: true
    strict_host_key_checking: "no"
    user_known_hosts_file: /dev/null
    state: present
  loop: "{{ workers_ips }}"
  loop_control:
    index_var: my_idx

- name: Template the inventory.ini.j2 configuration file to invetory.ini
  ansible.builtin.template:
    src: inventory.ini.j2
    dest: inventory.ini
    mode: '0644'
  delegate_to: localhost

- name: Refresh inventory to ensure that the new generated one is used
  ansible.builtin.meta: refresh_inventory

- name: Create host_vars directory if not present
  ansible.builtin.file:
    path: ./host_vars
    state: directory
    mode: '0755'

- name: Find and save in a local variable all host_vars files
  ansible.builtin.find:
    paths: ./host_vars
    patterns: "*.yml"
  register: files_to_delete

- name: Delete all the host_vars files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"

- name: Create the "host_vars" file for each k8s master-node
  ansible.builtin.file:
    path: ./host_vars/{{ item }}.yml
    state: touch
    mode: u=rw,g=r,o=r
  loop: "{{ groups.managers }}"

- name: Populate the manager-nodes host_vars files with the node ips
  ansible.builtin.lineinfile:
    path: "./host_vars/{{ item.0 }}.yml"
    line: "node_ip: {{ item.1 }}"
  loop: "{{ groups.managers | zip(managers_ips) | list }}"

- name: Create the "host_vars" file for each k8s worker-node
  ansible.builtin.file:
    path: ./host_vars/{{ item }}.yml
    state: touch
    mode: u=rw,g=r,o=r
  loop: "{{ groups.workers }}"

- name: Populatethe worker-nodes host_vars files with the node ips
  ansible.builtin.lineinfile:
    path: "./host_vars/{{ item.0 }}.yml"
    line: "node_ip: {{ item.1 }}"
  loop: "{{ groups.workers | zip(workers_ips) | list }}"
